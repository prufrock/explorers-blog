<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>David&#039;s Explorer Blog</title>
    <link href="https://dkanen.com/" />
    <link type="application/atom+xml" rel="self" href="https://dkanen.com/blog/feed.atom" />
    <updated>2021-09-15T21:56:52+00:00</updated>
    <id>https://dkanen.com/blog/feed.atom</id>
    <author>
        <name>David Kanenwisher</name>
    </author>
                <entry>
    <id>https://dkanen.com/blog/determining-generic-type</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/determining-generic-type" />
    <title>Determining Generic Type</title>
    <published>2021-09-15T00:00:00+00:00</published>
    <updated>2021-09-15T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Generics need a type to know their type....</summary>
    <content type="html"><![CDATA[
        <p>Generics need a way to know the generic type it's working. This seems obvious when you say but building an API that reasonably makes this happen can be tricky.</p>

<p>The coroutine function <code>async</code> does this by accepting a lambda. The return type of the lambda ends up becoming the return type of the generic. This is more clever than I initially realized. Let's take a look at usage:</p>

<pre><code class="language-kotlin">    @Test
    fun `runBlocking returns Deferred T`() {
        runBlocking {
            val deferred = async {
                listOf&lt;String&gt;("volcano sword")
            }
            val result = deferred.await()
            assertEquals("volcano sword", result[0])
        }
    }
</code></pre>

<p>You can see in the example above that I pass a lambda(the bare mustache braces) with an implicit return of <code>List&lt;String&gt;</code>. This allows async to create a <code>Deferred&lt;T&gt;</code> object with a type of <code>List&lt;String&gt;</code> by declaring that <code>T</code> is the return type of the lambda. There's a lot happening in teh definition of <code>async</code> but if you follow the generic type <code>T</code> you can see how this is happening"</p>

<pre><code class="language-kotlin">//file commonMain/Builders.common.kt
package kotlinx.coroutines

//...skip a bunch of stuff

public fun &lt;T&gt; CoroutineScope.async(
    context: CoroutineContext = EmptyCoroutineContext,
    start: CoroutineStart = CoroutineStart.DEFAULT,
    block: suspend CoroutineScope.() -&gt; T
): Deferred&lt;T&gt; {
    val newContext = newCoroutineContext(context)
    val coroutine = if (start.isLazy)
        LazyDeferredCoroutine(newContext, block) else
        DeferredCoroutine&lt;T&gt;(newContext, active = true)
    coroutine.start(start, coroutine, block)
    return coroutine
}
</code></pre>

<p>The type of the result of a lambda passed into a generic is one way to determine the generic of the function. One more nugget of knowledge on the path to understanding how to build generics into your projects.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/2021-09-15-jacoco-project-extension</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/2021-09-15-jacoco-project-extension" />
    <title>JaCoCo Doesn&#039;t Like New Version of Kotlin</title>
    <published>2021-09-15T00:00:00+00:00</published>
    <updated>2021-09-15T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Ran into trouble after upgrading to new version of Kotlin...</summary>
    <content type="html"><![CDATA[
        <p>I recently ran into a spot of trouble with JaCoCo after upgrading to a new version of Kotlin. The project was on Kotlin <code>1.3.72</code> and I bumped it all the way to <code>1.5.30</code>. I was a bit surprised that this all seemed to go smoothly until JaCoCo kicked out a weird error at me:</p>

<pre><code class="language-text">Unexpected SMAP line: *S
</code></pre>

<p>What?! I wasn't sure what to make of that. Thankfully a google search turned up a <a href="https://github.com/jacoco/jacoco/issues/1187">github issue</a>. Basically, I needed to update my version of JaCoCo to <code>0.8.7</code>. This seemed simple enough until I found myself digging around in our various gradle.build files unable to find a <code>dependencies</code> block with JaCoCo in it. All I could find was the JaCoCo plugin being applied: <code>apply plugin: 'jacoco'</code>.</p>

<p>After the significance of it being a plugin sunk in I google for "jacoco plugin" and ended on Gradle's <a href="https://docs.gradle.org/current/userguide/jacoco_plugin.html">JaCoCo plugin page</a>. This show a helpful little block:</p>

<pre><code class="language-text">jacoco {
    toolVersion = "0.8.7"
}
</code></pre>

<p>I put this in my build.gradle at the project level(or not nested inside any mustaches since that implies the project) and my build worked again! Hooray!</p>

<p>What is the JaCoCo plugin using that allows it to set a property at the project level though? <a href="https://docs.gradle.org/current/userguide/custom_plugins.html#sec:mapping_extension_properties_to_task_properties">Project Extensions</a>! These allow you to give the power to the user of the build script to configure tasks. Mind Blown.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/no-observable-object</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/no-observable-object" />
    <title>No Observable Object</title>
    <published>2020-05-05T00:00:00+00:00</published>
    <updated>2020-05-05T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">It&#039;s not always clear why views don&#039;t render in Xcode&#039;s preview....</summary>
    <content type="html"><![CDATA[
        <p>I ran into some trouble after I opened up the app I've been toying with in Xcode. The SwiftUI preview wouldn't render. I clicked "Diagnostics" and it said:</p>

<pre><code class="language-text">|  Error Domain=com.apple.dt.ultraviolet.service Code=12 "Rendering service was interrupted" UserInfo={NSLocalizedDescription=Rendering service was interrupted}
</code></pre>

<p>I have no idea what the ultraviolet service is, what it means that the code is 12, and it seems pretty clear the "Rendering service was interrupted". I did manage to find some more information by looking real close.</p>

<p>Depending on the size of your screen, on mine it was rather small, there's a little "i" with a circle around after the crashed message. I clicked that then clicked "Show Crash Logs".</p>

<p>After scrolling through a bunch of information I don't understand I struck gold. I saw something I could understand:</p>

<pre><code class="language-text">Fatal error: No ObservableObject of type AppData found. A View.environmentObject(_:) for AppData may be missing as an ancestor of this view.: file SwiftUI, line 0
</code></pre>

<p>Thankfully, I'd recently gained a higher understanding of ObservableObjects plus AppData is a name of a variable in my project. Thankfully and reasonably, AppData is an ObservableObject. How do I know it's an ObservableObject? Why I made it implement ObservableObject protocol:</p>

<pre><code class="language-swift">import SwiftUI

class AppData: ObservableObject {
    @Published var imageCache = ImageCache()
}
</code></pre>

<p>So the fatal error seems to be telling me that AppData is missing from the current view. This was the preview for my ContentView so the first place I go is the SceneDelegate. It looks like that's passing AppData:</p>

<pre><code class="language-swift">window.rootViewController = UIHostingController(rootView: contentView.environmentObject(appData))
</code></pre>

<p>"Ah but this is the preview!", I cry with a finger pointed firmly and vertically in the air.</p>

<p>I take a look at PreviewProvider in ContentView.</p>

<pre><code class="language-swift">struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
</code></pre>

<p>"Well there's your problem" points out the surly mechanic in my head.</p>

<p>If you are like the surly mechanic in my head then you likely noticed that <code>ContentView()</code> is bereft of a call to "environmentObject". This is the source of the fatal error reported earlier. A quick touch up and it's good to go:</p>

<pre><code class="language-swift">struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView().environmentObject(AppData())
    }
}
</code></pre>

<p>That did the trick! I can see my exceptional preview.</p>

<p>What hard to decipher error messages are you getting from SwiftUI? Let me know by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/openrndr-with-opencv</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/openrndr-with-opencv" />
    <title>Use OpenCV with OpenRNDR</title>
    <published>2020-04-02T00:00:00+00:00</published>
    <updated>2020-04-02T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Make OpenCV available with the OpenRNDR template...</summary>
    <content type="html"><![CDATA[
        <p>If you're like me you probably got started with <a href="https://openrndr.org/">OpenRNDR</a> by using their <a href="https://github.com/openrndr/openrndr-template">template</a>. Then you start fiddling with it and hooked up a camera or a kinect. At which point you may have wondered how in the world you do something with the pictures or video you're getting.</p>

<p>A quick search and you found yourself reading about OpenCV and scratching your head. At which point you may have thought, "How in the heck do I add this to my project?"</p>

<p>You proceed to do some more searches. After a bit of that you're pretty sure OpenCV isn't meant for you.</p>

<p>Friend, let me tell you something, you too can use OpenCV in your OpenRNDR project!</p>

<p>First, you'll need to compile OpenCV. Sure, it sounds daunting. I think my article on <a href="blog/java-build-opencv">compiling OpenCV for Java</a> can help. Go take a look.</p>

<p>Whew, did you get through it? It's quite a trip but now you should have the essential components you need to add OpenCV to your OpenRNDR project:</p>

<ol>
<li>The OpenCV jar.</li>
<li>The compiled native libraries.</li>
</ol>

<p>Let's go ahead and add OpenCV to OpenRNDR. I'm going to assume you're using some flavor of <a href="https://www.jetbrains.com/idea/download/">Intellij IDEA</a>. If not, you may be able to adapt what I'm doing here to your IDE.</p>

<p>Let's start with the <code>build.gradle.kts</code>. We're going to need to do a couple things in this file:</p>

<ol>
<li>Add dependency on the OpenCV jar.</li>
<li>Update the version of Java to the one you built the OpenCV jar against.</li>
</ol>

<p>For the first step you'll need the path to the OpenCV jar you built. For me that's <code>/Users/davidkanenwisher/Projects/build_opencv-349/bin/opencv-349.jar</code>.</p>

<p>Now open <code>build.gradle.kts</code>. Find <code>dependencies</code> and inside the curly braces <code>{}</code> add the line <code>implementation(files("/Users/davidkanenwisher/Projects/build_opencv-349/bin/opencv-349.jar"))</code>. Make sure to replace my path with your path. You're <code>dependencies</code> section should look something like this:</p>

<pre><code class="language-text">dependencies {

    /*  This is where you add additional (third-party) dependencies */

//    implementation("org.jsoup:jsoup:1.12.2")
//    implementation("com.google.code.gson:gson:2.8.6")

    //&lt;editor-fold desc="Managed dependencies"&gt;
    runtimeOnly(openrndr("gl3"))
    runtimeOnly(openrndrNatives("gl3"))
    implementation(openrndr("openal"))
    runtimeOnly(openrndrNatives("openal"))
    implementation(openrndr("core"))
    implementation(openrndr("svg"))
    implementation(openrndr("animatable"))
    implementation(openrndr("extensions"))
    implementation(openrndr("filter"))

    implementation("org.jetbrains.kotlinx", "kotlinx-coroutines-core","1.3.3")
    implementation("io.github.microutils", "kotlin-logging","1.7.8")

    when(applicationLogging) {
        Logging.NONE -&gt; {
            runtimeOnly("org.slf4j","slf4j-nop","1.7.29")
        }
        Logging.SIMPLE -&gt; {
            runtimeOnly("org.slf4j","slf4j-simple","1.7.29")
        }
        Logging.FULL -&gt; {
            runtimeOnly("org.apache.logging.log4j", "log4j-slf4j-impl", "2.13.0")
            runtimeOnly("com.fasterxml.jackson.core", "jackson-databind", "2.10.1")
            runtimeOnly("com.fasterxml.jackson.dataformat", "jackson-dataformat-yaml", "2.10.1")
        }
    }

    if ("video" in openrndrFeatures) {
        implementation(openrndr("ffmpeg"))
        runtimeOnly(openrndrNatives("ffmpeg"))
    }

    if ("panel" in openrndrFeatures) {
        implementation("org.openrndr.panel:openrndr-panel:$panelVersion")
    }

    for (feature in orxFeatures) {
        implementation(orx(feature))
    }

    if ("orx-kinect-v1" in orxFeatures) {
        runtimeOnly(orxNatives("orx-kinect-v1"))
    }

    if ("orx-olive" in orxFeatures) {
        implementation("org.jetbrains.kotlin", "kotlin-scripting-compiler-embeddable")
    }

    implementation(kotlin("stdlib-jdk8"))
    testImplementation("junit", "junit", "4.12")
    //&lt;/editor-fold&gt;

    implementation(files("/Users/davidkanenwisher/Projects/build_opencv-349/bin/opencv-349.jar"))
}
</code></pre>

<p>Mostly just pay attention to the last line. It's the one we added. If other parts are different it may be different versions of the template.</p>

<p>The second step you only need to do if didn't build OpenCV against Java 8. I built mine against Java 11. This meant I had to update these lines in <code>build.gradle.kts</code> to reflect that:</p>

<pre><code class="language-text">configure&lt;JavaPluginConvention&gt; {
    sourceCompatibility = JavaVersion.VERSION_1_8
}
tasks.withType&lt;KotlinCompile&gt; {
    kotlinOptions.jvmTarget = "1.8"
}
</code></pre>

<p>I changed these from <code>JavaVersion.VERSION_1_8</code> to <code>JavaVersion.VERSION_11</code> and <code>1.8</code> to <code>11</code> like so:</p>

<pre><code class="language-text">configure&lt;JavaPluginConvention&gt; {
    sourceCompatibility = JavaVersion.VERSION_11
}
tasks.withType&lt;KotlinCompile&gt; {
    kotlinOptions.jvmTarget = "11"
}
</code></pre>

<p>The last step before we get to see if it works. There's likely a better way to do this but it's the best I've come up with so far. In Intellij go to <code>File &gt; Project Structure</code>. On there go to <code>Modules</code>. You'll see some folders with your project at the top if it's still named <code>openrndr-template</code> that's what you'll see otherwise it will be your project name. Click <code>main</code> below that.</p>

<p>At that point you should see in the list <code>opencv-349.jar</code>. Note the name may be different depending on the folder you built it in.  Double-click on that. Then a little window should pop up titled "Configure Module Library". Click the little bitty <code>+</code> button in the lower left corner.</p>

<p>A file navigator window should open. Navigate to the file where you compiled opencv and select <code>lib</code>. For me that is <code>/Users/davidkanenwisher/Projects/build_opencv-349/lib</code>. You should see "Native Library Locations" with the path to the directory you just added.</p>

<p>Now let's see if this puppy runs! Open <code>TemplateProgram.kt</code> and change it to:</p>

<pre><code class="language-kotlin">import org.opencv.core.Core
import org.opencv.core.CvType
import org.opencv.core.Mat
import org.opencv.core.Scalar
import org.openrndr.application

fun main() = application {

    System.loadLibrary(Core.NATIVE_LIBRARY_NAME)

    print("Welcome to OpenCV " + Core.VERSION)

    println("Welcome to OpenCV " + Core.VERSION)
    val m = Mat(5, 10, CvType.CV_8UC1, Scalar(0.0))
    println("OpenCV Mat: $m")
    val mr1: Mat = m.row(1)
    mr1.setTo(Scalar(1.0))
    val mc5: Mat = m.col(5)
    mc5.setTo(Scalar(5.0))
    println(
        """
            OpenCV Mat data:
            ${m.dump()}
            """.trimIndent()
    )
}
</code></pre>

<p>Then click the little green arrow next to <code>main()</code> and you should get this output:</p>

<pre><code class="language-text">Welcome to OpenCV 3.4.9Welcome to OpenCV 3.4.9
OpenCV Mat: Mat [ 5*10*CV_8UC1, isCont=true, isSubmat=false, nativeObj=0x7fa51864a6e0, dataAddr=0x7fa51864a740 ]
         OpenCV Mat data:
         [  0,   0,   0,   0,   0,   5,   0,   0,   0,   0;
1,   1,   1,   1,   1,   5,   1,   1,   1,   1;
0,   0,   0,   0,   0,   5,   0,   0,   0,   0;
0,   0,   0,   0,   0,   5,   0,   0,   0,   0;
0,   0,   0,   0,   0,   5,   0,   0,   0,   0]
</code></pre>

<p>I hope it all went well. You should be able to add face detection, edge detection, or whatever other neat OpenCV features you'd like to add to your project now! Let me know what you get up to with OpenRNDR and OpenCV by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/kotlin-folder</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/kotlin-folder" />
    <title>Kotlin Folder Got To Have It</title>
    <published>2020-03-31T00:00:00+00:00</published>
    <updated>2020-03-31T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I ran into some trouble tonight when I didn&#039;t make a kotlin folder....</summary>
    <content type="html"><![CDATA[
        <p>I wanted to make a simple Kotlin project that I could use to try out different bits of code I found when reading other peoples code. I figured I'd just use <a href="https://guides.gradle.org/building-kotlin-jvm-libraries/">Gradle tutorial</a> to get me started but with a few tweaks. Namely, I wanted to use my own folder name <code>org/example</code> and remove the <code>kotlin</code> folder since I figured it was part of the tutorial. It turns out I was wrong.</p>

<p>I created a project with this structure:</p>

<pre><code class="language-text">$ tree
.
├── build.gradle.kts
└── src
    ├── main
    │   └── com
    │       └── dkanen
    │           └── MyLibrary.kt
    └── test
        └── com
            └── dkanen
                └── MyLibraryTest.kt
</code></pre>

<p>Notice the lack of a <code>kotlin</code> folder.</p>

<p>I set my Gradle file to look like the one in the tutorial up to the part about adding support for tests:</p>

<pre><code class="language-text">plugins {
    kotlin("jvm") version "1.3.61" 
}

repositories {
    jcenter() 
}

dependencies {
    implementation(kotlin("stdlib"))
    testImplementation("junit:junit:4.12")
}
</code></pre>

<p>I ran <code>gradle test</code> but the output was suspicious:</p>

<pre><code class="language-text"> gradle test

BUILD SUCCESSFUL in 1s
</code></pre>

<p>Shouldn't there have been something about my tests? I tinkered for a bit to no avail.</p>

<p>I thought maybe my tests are running so I adjusted them to make them fail. I got the same output as before; something was clearly wrong at this point.</p>

<p>I loaded it up in Intellij. In there I found that Intellij was refusing to run the tests claiming, "No test events were received."</p>

<p>I was perplexed. I looked back at the examples and saw the <code>kotlin</code> folder. I figured it was worth a shot.</p>

<p>I adjusted my directory structure like so:</p>

<pre><code class="language-text">.
├── build.gradle.kts
└── src
    ├── main
    │   └── kotlin
    │       └── com
    │           └── dkanen
    │               └── MyLibrary.kt
    └── test
        └── kotlin
            └── com
                └── dkanen
                    └── MyLibraryTest.kt
</code></pre>

<p>Notice the existence of the <code>kotlin</code> folder!</p>

<p>Now when I run with my failing test I get:</p>

<pre><code class="language-text">$ gradle test

&gt; Task :test FAILED

com.dkanen.MyLibraryTest &gt; testMyLanguage FAILED
    java.lang.AssertionError at MyLibraryTest.kt:9

1 test completed, 1 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
&gt; There were failing tests. See the report at: file:///Users/davidkanenwisher/IntelliJProjects/folder-trouble/build/reports/tests/test/index.html

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 1s
3 actionable tasks: 3 executed
</code></pre>

<p>Yay! It works now.</p>

<p>What was the last pesky problem you ran into getting Kotlin to work in Gradle? Let me know on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/java-build-opencv</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/java-build-opencv" />
    <title>Build OpenCV for Java/Kotlin on macOS</title>
    <published>2020-03-23T00:00:00+00:00</published>
    <updated>2020-03-23T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Building OpenCV for Java can be a bit of a trip....</summary>
    <content type="html"><![CDATA[
        <p>The other day I went to bring OpenCV <a href="https://opencv.org/">OpenCV</a> into an <a href="https://openrndr.org/">OpenRNDR</a> project. I soon discovered there was more to it than I first thought.</p>

<p>Let's start with a few housekeeping things:</p>

<ol>
<li>Homebrew</li>
<li>Ant</li>
<li>SDKMAN</li>
</ol>

<p>If you don't have Homebrew, you'll either need to get it or find another way to install Ant.</p>

<p>You need to have Ant to build OpenCV. You can check if it's installed on the command line by checking it's version:</p>

<pre><code class="language-text">$ ant -v
Apache Ant(TM) version 1.10.7 compiled on September 1 2019
Trying the default build file: build.xml
Buildfile: build.xml does not exist!
Build failed
</code></pre>

<p>If you don't have Ant, I recommend installing it via homebrew like so:</p>

<pre><code class="language-text">$ brew install ant
</code></pre>

<p>Do you already have SDKMAN? It's not absolutely necessary but it makes it easy to switch between versions and to know they are configured in such a way OpenCV's build process can find it. You can find the install steps here: <a href="https://sdkman.io/install">https://sdkman.io/install</a>.</p>

<p>SDKMAN doesn't have the official JDK in it but you can add in any you have installed. You can either place them in the SDKMAN directory <code>/Users/davidkanenwisher/.sdkman/candidates/java</code> or link them. I have my JDK installed in <code>/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/</code> so I linked it into SDKMAN like so:</p>

<pre><code class="language-text">ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/ /Users/davidkanenwisher/.sdkman/candidates/java/1.8.0_241-oracle
</code></pre>

<p>Lastly, lets install and use your preferred java version. I'm going with Java 11 open JDK. With SDKMAN this is pretty easy. In your terminal run this command and answer yes to "set as default":</p>

<pre><code class="language-text">$ sdk install java 11.0.2-open
</code></pre>

<p>Feel free to use your preferred JDK though I don't know enough about OpenCV and Java to know if a certain JDK's won't work.</p>

<p>Let's get down to building OpenCV.</p>

<p>First, go to the OpenCV website and download the sources of the version you want to build: <a href="https://opencv.org/releases/">https://opencv.org/releases/</a>. I'm going with 4.2.0.</p>

<p>This unzips into the folder <code>opencv-4.2.0</code>. Don't switch into that directory yet! In the same directory as <code>opencv-4.2.0</code> create a folder <code>build_opencv-420</code> and switch into it <code>build_opencv-420</code>:</p>

<pre><code class="language-text">$ mkdir build_opencv-420
$ cd build_opencv-420
</code></pre>

<p>Before you can build OpenCV you need configure and create the cmake file:</p>

<pre><code class="language-text">$ cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DBUILD_opencv_java=ON ../opencv-4.2.0 &amp;&gt; output.txt
</code></pre>

<p>Now take a peak at <code>output.txt</code> and check to see if Java support is going to be built. In there you should see:</p>

<pre><code class="language-text">--     To be built:                 calib3d core dnn features2d flann gapi highgui imgcodecs imgproc java ml objdetect photo python3 stitching ts video videoio
</code></pre>

<pre><code class="language-text">--   Java:
--     ant:                         /usr/local/bin/ant (ver 1.10.7)
--     JNI:                         /Users/davidkanenwisher/.sdkman/candidates/java/current/include /Users/davidkanenwisher/.sdkman/candidates/java/current/include/darwin /Users/davidkanenwisher/.sdkman/candidates/java/current/include
--     Java wrappers:               YES
--     Java tests:                  YES
</code></pre>

<p>Ok, now it's time to build OpenCV. Your poor computer is going to have to work pretty hard to make this happen so make sure you can live without it for an hour or so depending on your hardware. When you're ready run this command:</p>

<pre><code class="language-text">$ make -j8
</code></pre>

<p>If all goes well you should get the message:</p>

<pre><code class="language-text">BUILD SUCCESSFUL
</code></pre>

<p>Amongst a whole bunch of other files you should have:</p>

<pre><code class="language-text">bin/opencv-420.jar
lib/libopencv_java420.dylib
</code></pre>

<p>The first, <code>opencv-420.jar</code>, is the jar file you'll need to import into your project.</p>

<p>The second, <code>libopencv_java420.dylib</code>, is the natively compiled library that you'll need to point to when you run your application.</p>

<p>Now that you have OpenCV ready to run in your Java/Kotlin application what awesome uses are you going to put it to? Send me a message on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/when-type-inference-doesn&#039;t-cut-it</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/when-type-inference-doesn&#039;t-cut-it" />
    <title>When Type Inference Doesn&#039;t Cut It</title>
    <published>2020-03-08T00:00:00+00:00</published>
    <updated>2020-03-08T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">It turns out you can&#039;t always use Kotlin&#039;s type inference. There are times when you need to explicitly call out the type....</summary>
    <content type="html"><![CDATA[
        <p>In order to learn Kotlin I've been working my way through a goofy program called "adventure-venture". I honestly don't have a clear idea of what it does but so far it has adventurers in a tavern that want to talk to each other. I'm also trying to understand event based systems so the adventurers interact with the world through events.</p>

<p>In the process of trying to get the adventurers to talk to each other I've been refactoring the way the system works. When I refactor I like to try and keep all of the tests passing as I advance forward with the refactoring. That way it's clear when I am changing behavior and when I am not. It's in this way that I discovered a situation where I can't rely on type inference.</p>

<p>I got my code to the point where I had these two tests:</p>

<pre><code class="language-kotlin">    @Test
    fun `it can dispatch an empty event object`() {
        val dispatcher = Dispatcher()

        var passedValue = EmptyEvent()

        dispatcher.eventSubscribe { event -&gt; passedValue = event }

        assertEquals("", passedValue.name)
    }

    @Test
    fun `it can dispatch an emitted event object`() {
        val dispatcher = Dispatcher()

        var passedValue = EmittedEvent("emittedSound")

        dispatcher.eventSubscribe { event -&gt; passedValue = event }

        assertEquals("emittedSound", passedValue.name)
    }
</code></pre>

<p>Notice that in the first test I have <code>var passedValue = EmptyEvent()</code> and in the second test I have a similar line <code>var passedValue = EmittedEvent("emittedSound")</code>. Why not just leave them like this then? Well, they don't compile because <code>dispatcher.eventSubscribe</code> expects a lambda of type <code>(Event) -&gt; Unit</code>. I thought I had this covered by creating the <code>Event</code> interface and making each implement this interface. No dice, I starting getting <code>Type mismatch</code> errors from Intellij on this line:</p>

<pre><code class="language-kotlin">        dispatcher.eventSubscribe { event -&gt; passedValue = event }
</code></pre>

<p>After staring at my code a bit a thought occurred to me. The type of <code>event</code> above is <code>Event</code> while the type of <code>passedValue</code> is either <code>EmptyEvent</code> or <code>EmittedEvent</code>. This means I must not be able to assign a more specific type, <code>EmptyEvent</code> or <code>EmittedEvent</code>, to a less specific type <code>Event</code>. This lead to me think I need to declare the type as <code>Event</code> so that <code>passedValue</code> can always hold an <code>Event</code>.</p>

<p>I added explicit type information to <code>passedValue</code> by changing it to <code>passedValue: Event</code> like so:</p>

<pre><code class="language-kotlin">    @Test
    fun `it can dispatch an empty event object`() {
        val dispatcher = Dispatcher()

        var passedValue: Event = EmptyEvent()

        dispatcher.eventSubscribe { event -&gt; passedValue = event }

        assertEquals("", passedValue.name)
    }

    @Test
    fun `it can dispatch an emitted event object`() {
        val dispatcher = Dispatcher()

        var passedValue: Event = EmittedEvent("emittedSound")

        dispatcher.eventSubscribe { event -&gt; passedValue = event }

        assertEquals("emittedSound", passedValue.name)
    }
</code></pre>

<p>That did the trick and my tests start passing. I do wonder if generics could help out here but I haven't played with them much yet.</p>

<p>How about you? Let me know if you've learned anything interesting about Kotlin's type inference by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/jigsaw-many-authors</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/jigsaw-many-authors" />
    <title>Support Many Authors in Jigsaw</title>
    <published>2020-02-21T00:00:00+00:00</published>
    <updated>2020-02-21T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">A quick guide on how to support more than one author in Jigsaw....</summary>
    <content type="html"><![CDATA[
        <p>If you were like me and found <code>siteAuthor</code> in config.php and assumed Jigsaw only supported one author, then, my friend, you've come to the right place. The process of adding more than one author isn't too difficult you just have to know it's possible and where to make the necessary tweaks.</p>

<p>When you first install Jigsaw you'll have a <code>config.php</code> that starts with a section that looks like this:</p>

<p>config.php</p>

<pre><code class="language-text">    'baseUrl' =&gt; '',
    'production' =&gt; false,
    'siteName' =&gt; 'Blog Starter Template',
    'siteDescription' =&gt; 'Generate an elegant blog with Jigsaw',
    'siteAuthor' =&gt; 'Author Name',

    // collections
    'collections' =&gt; [
        'posts' =&gt; [
            'author' =&gt; 'Author Name', // Default author, if not provided in a post
            'sort' =&gt; '-date',
            'path' =&gt; 'blog/{filename}',
        ],
        'categories' =&gt; [
            'path' =&gt; '/blog/categories/{filename}',
            'posts' =&gt; function ($page, $allPosts) {
                return $allPosts-&gt;filter(function ($post) use ($page) {
                    return $post-&gt;categories ? in_array($page-&gt;getFilename(), $post-&gt;categories, true) : false;
                });
            },
        ],
    ],

</code></pre>

<p>Now <code>siteAuthor</code> struck me as sounding like a pretty big deal and I, incorrectly, assumed it was meant to imply the site could only be authored by one person. Further down there is a <code>collections-&gt;posts-&gt;author</code> which I figured set the author on all of the posts since I didn't see an <code>author</code> in example posts.</p>

<p>It turns out that <code>siteAuthor</code> is only used in <code>source/_layouts/rss.blade.php</code> out of the box. That may have change in your Jigsaw blog so it'd be worth searching the <code>source</code> directory for <code>siteAuthor</code>. In <code>rss.blade.php</code> <code>siteAuthor</code> sets the author of the blog. This means if you didn't want there to be only one author you can set it to something more general like <code>Engineering Blog</code> or <code>Cosmetology Blog</code>. Then either all of your engineer friends or cosmetology friends could blog there.</p>

<p>The <code>collections-&gt;posts-&gt;author</code> in <code>config.php</code> is the author that's used when no author is specified on a post. That begs the question: How do you specify an author on a post? It's pretty straightforward. When you make a post add an <code>author</code> attribute to the meta information at the top like so:</p>

<p>meta information with author at the top of a post:</p>

<pre><code class="language-text">---
extends: _layouts.post
section: content
title: Support Many Authors in Jigsaw
date: 2020-02-21
description: A quick guide on how to support more than one author in Jigsaw.
cover_image: /assets/img/3-ink-bottles.svg
excerpt: If you were like me and found "siteAuthor" in config.php and assumed Jigsaw only supported one author, then, my friend, you've come to the right place.
categories: [jigsaw]
author: David Kanenwisher
---
</code></pre>

<p>Now that I know how to do it I feel a bit silly. It's a feeling I get quite often after I learn something new. What surprising simply but useful thing have you learned recently? Let me know by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/first-attempt-at-collections</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/first-attempt-at-collections" />
    <title>First Attempt At Collections</title>
    <published>2020-02-19T00:00:00+00:00</published>
    <updated>2020-02-19T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">How I started using Kotlin&#039;s list and determined how to iterate over it....</summary>
    <content type="html"><![CDATA[
        <p>I need to figure out someway to satisfy my new test which checked to see if two different functions could subscribe to and receive an event from the Broadcaster. Up to this point, in Test Drive Development(TDD) fashion, my tests had allowed me to get away with sending an event to only one subscriber. I wanted to get this functionality into the Broadcaster so I added this test:</p>

<pre><code class="language-kotlin">    @Test
    fun `more than one Subscriber can receive a broadcast`() {
        val dispatcher = Dispatcher()

        var firstValue = ""

        dispatcher.subscribe { event -&gt; firstValue = event }

        var secondValue = ""

        dispatcher.subscribe { event -&gt; secondValue = event }

        dispatcher.broadcast("event")


        assertEquals("event", firstValue)
        assertEquals("event", secondValue)
    }
</code></pre>

<p>Currently, the Dispatcher only supports a subscriber so the first assertion failed since the first subscriber was replaced by the second. How was I going to create a list of subscribers inside of the Dispatcher? I'd seen a few things about lists in the <a href="https://www.bignerdranch.com/books/kotlin-programming-the-big-nerd-ranch-guide-2/">Big Nerd Ranch Kotlin book</a> and in the <a href="https://kotlinlang.org/docs/reference/collections-overview.html">Kotlin documentation</a>. With that and the knowledge I'd won so far I had a place to start.</p>

<p>I began by creating a <code>subscriberList</code> with the type <code>(String) -&gt; Unit</code> to match the type of the lambdas I knew I wanted to stuff in there. My previous experience with accepting a lambda as a parameter and assigning into a variable had prepared for this part. I'd seen the carrot syntax <code>&lt;Type&gt;</code> in documentation so figured that'd be the way to go. One last thing I ran into trouble with was Kotlin wouldn't let leave <code>subscriberList</code> null so I had to initialize it with <code>listOf()</code> something I saw in the Big Nerd Ranch book. I stuck all this together and got a compiling <code>subcriberList</code> declaration.</p>

<pre><code class="language-kotlin">    var subscriberList: List&lt;(String) -&gt; Unit&gt; = listOf()
</code></pre>

<p>Cool. Making progress. Now I needed to add a subscriber to my list. I ran into a problem pretty quick. I started updating <code>fun subscribe</code> with <code>subscriberList</code>. I put the <code>.</code> at end of the variable so I could call a method to add an element to the list. I figured I could autocomplete my way to the problem. I typed "a". Didn't see anything. I typed "add". Nothing. I switched to "app" hoping for "append". Nothing. What was going on here? Why weren't there any methods to add something to my list. A quick peak back in the Big Nerd Ranch book and I realize I need a mutable list!</p>

<pre><code class="language-kotlin">    var subscriberList: MutableList&lt;(String) -&gt; Unit&gt; = mutableListOf()
</code></pre>

<p>Now I have an "add" method on my list. I put that in place like so:</p>

<pre><code class="language-kotlin">    fun subscribe(subscriberFunction: (String) -&gt; Unit) {
        subscriber = subscriberFunction
        subscriberList.add(subscriber)
    }
</code></pre>

<p>One more thing to do. When I broadcast an event it needs to go to all of the subscribers in <code>subscriberList</code>. How do I iterate over this thing? I always liked using <code>map</code> in other languages when I want to loop over the set with a succinct lambda. I give that go here:</p>

<pre><code class="language-kotlin">    fun broadcast(event: String) {
        subscriber(event)
        subscriberList.map { subscriber -&gt; subscriber(event)}
    }
</code></pre>

<p>I know there are some other ways to iterate over a list so I give those a shot out of curiosity.</p>

<p>There's <code>for</code> which reminds of PHP's <a href="https://www.php.net/manual/en/control-structures.foreach.php">foreach</a>:</p>

<pre><code class="language-kotlin">    fun broadcast(event: String) {
        subscriber(event)
        for (subscriber in subscriberList) {
            subscriber(event)
        }
    }
</code></pre>

<p>Then there's <code>forEach</code> which is a bit more functional:</p>

<pre><code class="language-kotlin">        subscriberList.forEach { subscriber -&gt; subscriber(event) }
</code></pre>

<p>You know what I think I might like that more. I find that I tend to think <code>map</code> implies the list is going to be modified by the loop. The <a href="https://kotlinlang.org/docs/reference/collection-transformations.html">Kotlin documentation</a> has this to say about <code>map</code>:</p>

<blockquote>
  <p>The mapping transformation creates a collection from the results of a function on the elements of another collection.</p>
</blockquote>

<p>The word transformation there stands out to me. I'm not really transforming the collection and I also don't need the result of that transformation. <code>forEach</code> seems much more appropriate. The <strong>semantics</strong> of <code>forEach</code> fit the situation better which means I'll be able to think about the code faster when I come back to it.</p>

<p>There's one last bit of syntactical sugar I'd like to try <code>it</code>. I've see it a bunch of times in various discussions of how lambdas work on collections. I think I can use <code>it</code> here it short up this code just a smidgen:</p>

<pre><code class="language-kotin">    fun broadcast(event: String) {
        subscriber(event)
        subscriberList.forEach { it(event) }
    }
</code></pre>

<p>It works! With <code>it</code> I don't need to declare the element I'm work on as a <code>subscriber</code>. Instead Kotlin just assumes the variable is <code>it</code>. Kotlin knows, from the type information, that <code>subscriberList</code> holds lambdas. Therefore anything coming out of <code>subscribeList</code> can be called like a function. From that <code>it</code> can be called as a function. Pretty neat!</p>

<p>Here's how it all came together*:</p>

<pre><code class="language-kotlin">package com.dkanen

class Dispatcher {

    val subscriberList: MutableList&lt;(String) -&gt; Unit&gt; = mutableListOf()

    fun subscribe(subscriberFunction: (String) -&gt; Unit) {
        subscriberList.add(subscriberFunction)
    }

    fun broadcast(event: String) {
        subscriberList.map { subscriber -&gt; subscriber(event)}
    }

    fun subscribe(newSubscriber: Subscriber) {
        subscriberList.add({event -&gt; newSubscriber.receive(event)})
    }
}
</code></pre>

<p>*You may have noticed in the examples above, except the last, I still had references to the old variables like <code>subscriber</code>. It has to do with the way I keep the methods working while I am refactoring. This keeps with test driven development(TDD). I'll write about that some more a different time.</p>

<p>What ways have you found to bring collections into your projects? Let me know by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/shorthand-function-syntax</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/shorthand-function-syntax" />
    <title>Shorthand Function Syntax</title>
    <published>2020-02-18T00:00:00+00:00</published>
    <updated>2020-02-18T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Save yourself some typing(and reading) with Kotlin&#039;s shorthand function syntax....</summary>
    <content type="html"><![CDATA[
        <p>I'd seen some goofy syntax referred to in Kotlin posts and books and today I figured out how to use it!</p>

<p>I had some code that looked like this:</p>

<pre><code class="language-kotlin">    @Test
    fun `when a lambda is passed to subscribe it can receive a broadcast`() {
        val dispatcher = Dispatcher()

        var passedValue = ""
        val subscribeFunction: (String) -&gt; Unit = { event -&gt;
            passedValue = event
        }

        dispatcher.subscribe(subscribeFunction)
        dispatcher.broadcast("event")

        assertEquals("event", passedValue)
    }
</code></pre>

<p>The whole thing with <code>(String) -&gt;Unit</code> didn't seem necessary. It seems like the type should be inferred. Do I even need <code>subscribeFunction</code>? I was pretty sure I'd seen something in the Big Nerd Ranch Kotlin book about a simple syntax for functions. I started clicking through it. After a few trips around the same chapters I found a section title "Shorthand syntax"! That's it! that's what I'm looking for!</p>

<p>Ecstatic, I flipped back to my editor and updated my code to look like so:</p>

<pre><code class="language-kotlin">    @Test
    fun `when a lambda is passed to subscribe it can receive a broadcast`() {
        val dispatcher = Dispatcher()

        var passedValue = ""

        dispatcher.subscribe { event -&gt; passedValue = event }
        dispatcher.broadcast("event")

        assertEquals("event", passedValue)
    }
</code></pre>

<p>Notice how I was able to get rid of the function's type signature <code>(String) -&gt; Unit</code> and remove the variable <code>subscribeFunction</code>. All I need is the simple block <code>{ event -&gt; passedValue = event }</code>.</p>

<p>What a day my friends! What. A. Day.</p>

<p>What nifty uses have you come up with for the shorthand syntax for functions? Let me know by dropping me a line on the <a href="/contact">contact page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/lambda-sans-return</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/lambda-sans-return" />
    <title>Lambda Sans Return</title>
    <published>2020-02-17T00:00:00+00:00</published>
    <updated>2020-02-17T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I created a lambda in Kotlin the other day and was perplexed that I couldn&#039;t avoid giving it a return type....</summary>
    <content type="html"><![CDATA[
        <p>I created a lambda in Kotlin the other day and was perplexed that I couldn't avoid giving it a return type. Then I heard about <code>Unit</code>. Supposedly, I could return <code>Unit</code> and not have to worry about the return type on my lambdas. I don't know much about <code>Unit</code> but I had to see this in action.</p>

<p>I took some code I've been fiddling with, a sort of observer object that I call a Dispatcher. It accepts a lambda as way to receive an event from the Dispatcher. The test for it looks like so:</p>

<pre><code class="language-kotlin">package com.dkanen

import kotlin.test.Test
import kotlin.test.*

class DispatcherTest {

    @Test
    fun `when a lambda is passed to subscribe it can receive a broadcast`() {
        val dispatcher = Dispatcher()

        var passedValue = ""
        val subscribeFunction: (String) -&gt; String = { event -&gt;
            passedValue = event
            passedValue
        }

        dispatcher.subscribe(subscribeFunction)
        dispatcher.broadcast("event")

        assertEquals("event", passedValue)
    }
}
</code></pre>

<p>Did you see the <code>subscribeFunction</code> that has a weired second line <code>passedValue</code>? Kotlin's lambda like to keep things short and omit the return statement for the last line. I need to have that strange line there because I need to satisfy the type signature and return a String.</p>

<p>The implementation of Dispatcher that makes the test pass:</p>

<pre><code class="language-kotlin">package com.dkanen

class Dispatcher {

    var subscriber: (String) -&gt; String = { "test"  }

    fun subscribe(subscriberFunction: (String) -&gt; String) {
        subscriber = subscriberFunction
    }

    fun broadcast(event: String) {
        subscriber(event)
    }
}
</code></pre>

<p>Notice how the <code>var subscriber</code> has a type signature of <code>(String) -&gt; String</code>. This means that the lambda has to take a String as an argument and return a String. I can make it return a String for the sake of making it work. I don't like it though because it suggests to the reader they should do something with that String. Now that I know about <code>Unit</code> I have what I need to rid my code of this confusion.</p>

<p>I go in and update Dispatcher:</p>

<pre><code class="language-kotlin">package com.dkanen

class Dispatcher {

    var subscriber: (String) -&gt; Unit = {}

    fun subscribe(subscriberFunction: (String) -&gt; Unit) {
        subscriber = subscriberFunction
    }

    fun broadcast(event: String) {
        subscriber(event)
    }
}
</code></pre>

<p>Notice how subscriber type signature is now <code>(String) -&gt; Unit</code>.</p>

<p>Then I update the test:</p>

<pre><code class="language-kotlin">package com.dkanen

import kotlin.test.Test
import kotlin.test.*

class DispatcherTest {

    @Test
    fun `when a lambda is passed to subscribe it can receive a broadcast`() {
        val dispatcher = Dispatcher()

        var passedValue = ""
        val subscribeFunction: (String) -&gt; Unit = { event -&gt;
            passedValue = event
        }

        dispatcher.subscribe(subscribeFunction)
        dispatcher.broadcast("event")

        assertEquals("event", passedValue)
    }
}
</code></pre>

<p>Checkout how <code>subscribeFunction</code> matches the type signature of of Dispatcher's <code>subscribe</code> by removing the implied return. Awesome sauce.</p>

<p>I am a bit curious about <code>Unit</code> but that's a topic for a different day.</p>

<p>What cool ways are you finding to shorten your lambdas in Kotlin?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/oh-graphql-may-i-have-a-user</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/oh-graphql-may-i-have-a-user" />
    <title>Oh GraphQL, May I Have Some Users?</title>
    <published>2020-02-16T00:00:00+00:00</published>
    <updated>2020-02-16T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Where in I struggle and then succeed to get some users from the users query in GraphQL....</summary>
    <content type="html"><![CDATA[
        <p>I've heard GraphQL is easy to pick up. I've done a little reading on the official <a href="https://graphql.org/">GraphQL site</a> and watch some videos on YouTube. I figure I got what I need to get started. I just need a GraphQL server.</p>

<p>I went the through the <a href="https://lighthouse-php.com/tutorial/#installation">tutorial</a> on Lighthouse PHP's website. Well, not the whole thing(yet), just the installation part. I stopped there because I got back the user like in their example.</p>

<p>GraphQL Query for a user</p>

<pre><code class="language-graphql">{
  user(id: 1) {
    id
    name
    email
  }
}
</code></pre>

<p>With this result:</p>

<pre><code class="language-graphql">{
  "data": {
    "user": {
      "id": "1",
      "name": "Shea Spencer DDS",
      "email": "ismael.fisher@example.net"
    }
  }
}
</code></pre>

<p>Notice how the of <strong>shape</strong> of the query and the result are similar? Maybe you're wondering why I said <strong>shape</strong>? It seems to be the fancy way the GraphQL folks like to say that, ignoring the "data" key, the query and the result have the same keys in the same order. Therefore if I add or remove keys from the query I can change what comes back. For instance I can remove "email" from the query.</p>

<p>GraphQL query for user without "email":</p>

<pre><code class="language-graphql">{
  user(id: 1) {
    id
    name
  }
}
</code></pre>

<p>Result of the GraphQL query:</p>

<pre><code class="language-graphql">{
  "data": {
    "user": {
      "id": "1",
      "name": "Shea Spencer DDS"
    }
  }
}
</code></pre>

<p>See how email is gone? Pretty neat, eh? I didn't have to do anything special in my PHP code to make that happen. Lighthouse just handles it for me. Pretty damn spiffy if you ask me. Ok, ok, let's get to the part where I confuse myself and then eventually resolve that confusion in a shower of JSON.</p>

<p>I saw this query for "user(id: 1)". (Can I take you aside for a moment and explain something to you? So those parentheses after "user" that's called an argument. Supposedly any field in GraphQL can take an argument. No more fuddling with the URL non-sense. Rockin' right?). I thought, "If I can get one user I must be able to get 2 users, 3 users, all of the users?" Being the intrepid explorer that I am I tried this query:</p>

<p>First attempt to get users from GraphQL:</p>

<pre><code class="language-graphql">{
  # switched user to users
  # you can put comments in GraphQL queries
  # so rad
  users {
    id
    name
    email
  }
}
</code></pre>

<p>This is when I realize...The game is a foot!</p>

<pre><code class="language-graphql">{
  "errors": [
    {
      "message": "Cannot query field \"id\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 3,
          "column": 5
        }
      ]
    },
    {
      "message": "Cannot query field \"name\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 4,
          "column": 5
        }
      ]
    },
    {
      "message": "Cannot query field \"email\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 5,
          "column": 5
        }
      ]
    }
  ]
}
</code></pre>

<p>"I don't want a UserPaginator!", I shake my fist at the screen, "What is this nonsense. I read something about a schema! Show me the schema you foul ruffian!"</p>

<p>The GraphQL Playground has a little schema drawer on the left side. It doesn't response to shouting but it does respond, like a friendly button, to clicks. I scroll around a bit and find what I'm looking for:</p>

<pre><code class="language-graphql">type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User!]!
}
</code></pre>

<p>Ah ha! There's the User I want. For some reason it's shouting "User!" at me but I'll worry about that later. For now I venture forward. Everybody is always talking about the shapes of queries so I take a run at shaping my query to get at the "User!" in "UserPaginator".</p>

<p>UserPaginator show me Users!</p>

<pre><code class="language-graphql">{
  users {
    UserPaginator {
      data {
        name
      }
    }
  }
}
</code></pre>

<p>I guess not:</p>

<pre><code class="language-graphql">{
  "errors": [
    {
      "message": "Cannot query field \"UserPaginator\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 3,
          "column": 5
        }
      ]
    }
  ]
}
</code></pre>

<p>Drat! That wasn't it. Back to the schema because I clearly don't understand what I think I'm working with. I find a "users" query defined in the schema. I'm pretty sure I got a hold of something here.</p>

<pre><code class="language-graphql">type Query {
  users(
    first: Int = 10
    page: Int
  ): UserPaginator
  user(id: ID): User
}
</code></pre>

<p>Does that mean "users" returns a UserPaginator? If so then I think I should treat the "users" element as a "UserPaginator" and put fields I want in there.</p>

<p>Query for the fields I want on UserPaginator:</p>

<pre><code class="language-graphql">{
  users {
    # data is a field on UserPaginator
      data {
        id
        name
        email
      }
  }
}
</code></pre>

<p>The result. I hit pay dirt!</p>

<pre><code class="language-graphql">{
  "data": {
    "users": {
      "data": [
        {
          "id": "1",
          "name": "Shea Spencer DDS",
          "email": "ismael.fisher@example.net"
        },
        {
          "id": "2",
          "name": "Prof. Soledad Larson",
          "email": "mmorissette@example.net"
        },
        {
          "id": "3",
          "name": "Dr. Coleman Boehm",
          "email": "senger.kolby@example.net"
        },
        {
          "id": "4",
          "name": "Jazmyn Padberg",
          "email": "london72@example.net"
        },
        {
          "id": "5",
          "name": "Parker Stokes",
          "email": "valentina.gulgowski@example.org"
        },
        {
          "id": "6",
          "name": "Raven McDermott",
          "email": "fpouros@example.org"
        },
        {
          "id": "7",
          "name": "Alec Pouros",
          "email": "erdman.herminio@example.org"
        },
        {
          "id": "8",
          "name": "Fanny Harber",
          "email": "erich80@example.com"
        },
        {
          "id": "9",
          "name": "Emelia Rogahn",
          "email": "thurman65@example.org"
        },
        {
          "id": "10",
          "name": "Jayne Klocko",
          "email": "kaya.rutherford@example.net"
        }
      ]
    }
  }
}
</code></pre>

<p>That's how I figured out how to get fields on the users query. I can't say I fully understand why UserPaginator gets to override "users" in the query. Also, why is the element "data" rather than "users"? It seems like I'm losing some useful type information there.</p>

<p>My questions aside, how's your GraphQL journey going?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/test-events-were-not-received</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/test-events-were-not-received" />
    <title>I&#039;ll Receive You Some Test Events!</title>
    <published>2020-02-15T00:00:00+00:00</published>
    <updated>2020-02-15T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">A fix for the Intellij message &quot;Test events were not received&quot; when running tests with Gradle and Kotlin....</summary>
    <content type="html"><![CDATA[
        <p>I sat down in front of my laptop to learn some GraphQL. I was flipping through my open windows and I discovered I had some uncommitted Kotlin code in the repo where I am learning Kotlin. This wouldn't do. No, this wouldn't do.</p>

<p>I went to commit the code and Intellij helpfully told me there were some warnings that I should review before committing.</p>

<p>"OK", I thought, "probably not that important. I'll just run the tests and if they pass I'll commit." If it only it were that easy...queue Jefferson Airplane cuz we're going down a rabbit hole. Intellij gave me a very understated message in my test runner window "Test events were not received". I was pretty sure this was related to Gradle.</p>

<p>As a quick aside, I don't know much about Gradle yet. I need to know more about Gradle. Eventually I'll be able to understand Gradle. Until then, I fully expect to lean on my knowledgeable co-workers to set up Gradle projects correctly.</p>

<p>Some quick <a href="https://duckduckgo.com">DuckDuckGo</a>'ing and I found there was an answer on StackOverflow.</p>

<p><a href="https://stackoverflow.com/questions/57795263/test-events-were-not-received-when-run-tests-using-intellij">“Test events were not received” when run tests using Intellij</a></p>

<p>I spoke the words, "Yay! An answer to my exact question!"</p>

<p>They recommended switching test runners. You go to "File -> Settings ->Build,Execution, Deployment -> Build Tools -> Gradle" and set the "Run tests using" to "Intellij". This worked for a hot second. Then I got skeptical(this often causes me trouble). "Shouldn't this just work?", I thought, "Gradle test works in my shell. Why not in Intellij?". I fiddled with some settings mostly in the aforementioned window and broke the tests such that I couldn't get them to work anymore.</p>

<p>I got a little despondent at this point. I wondered if I'd ever be able to run all my tests in Intellij without having to grok all of Gradle. I just wanted to get back to learning about GraphQL!</p>

<p>Then I had heard a light bulb "click" and I right clicked on the "test" folder. There I found a "Run "All Tests"" option.</p>

<p>I clicked it.</p>

<p>They all ran. I clicked it again. They all ran. I tried the gradle test task in Intellij. Agony again "Test events were not received". It was different I was starting to understand the pain now.</p>

<p>When I ran via "Run "All Tests"" I noticed that it showed "<default package>" at the top. I don't understand what that means exactly. It made me wonder if I had the packages correct in my tests. I started checking them.</p>

<p>That's when I found it. One of them had the package set to "acceptance". I switched it to "com.dkanen". Then bingo bango it worked from Intellij's gradle test task! Well, or so I thought.</p>

<p>Friends, I have to admit I ran into a wall on this one. I can never get gradle test to work more than once in Intellij without running gradle clean first. It's always like this:</p>

<ol>
<li>gradle clean</li>
<li>gradle test</li>
<li>goto 1</li>
</ol>

<p>I'm going to live with "Run "All Tests"" for now.</p>

<p>Have you run into "Test events were not received" in Intellij and found a reliable way to fix it?</p>

<p>I'm going back to GraphQL...for now.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/single-expression-functions</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/single-expression-functions" />
    <title>Single Expression Functions</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I recently learned about single expression functions and am amazed at how simple the function you can created with them are....</summary>
    <content type="html"><![CDATA[
        <p>I was listening to Talking Kotlin <a href="https://pca.st/09ybe338">Kotlin Cookbook</a>. The author of the Kotlin Cookbook, Ken Kousen, mentioned that one of the features he really likes about Kotlin are single expression functions. He even pointed out how cool it was that many of the functions in the Kotlin standard library are implemented as Single Expression Functions. At this point my curiosity had piqued and I had to know more.</p>

<p>I did some rapid googling and found myself staring at Programming Kotlin by Stephen Samuel and Stefan Bocutiu. There was a very short chapter in there on Single Expression Functions but after staring at it for a few minutes I had to try it out.</p>

<p>I've got this dirt simple class that I was able to change from this:</p>

<pre><code class="language-kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int {
        return (++location)
    }

    fun talk(): String {
        return "You talk to no one in particular."
    }

    fun listen(): String {
        return "There is no sound to hear."
    }

    fun talk(listener: Adventurer): String {
       return "Talking to yourself may be a sign of genius"
    }

    fun heard(): String {
       return "How fair the beets at this establishment?"
    }

}
</code></pre>

<p>To this:</p>

<pre><code class="language-kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int = (++location)

    fun talk(): String = "You talk to no one in particular."

    fun listen(): String = "There is no sound to hear."

    fun talk(listener: Adventurer): String = "Talking to yourself may be a sign of genius"

    fun heard(): String = "How fair the beets at this establishment?"

}
</code></pre>

<p>Do you see the difference? Pretty neat eh?</p>

<p>What do you think you could use Single Expression Functions to simplify?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.com/blog/getting-started-with-jigsaw</id>
    <link type="text/html" rel="alternate" href="https://dkanen.com/blog/getting-started-with-jigsaw" />
    <title>Getting Started With Jigsaw</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">You&#039;ve got some ideas kicking around your heard for a blog. You know how to use Laravel pretty well and want to get to writing things down now! Jigsaw the Laravel based static site generator may be just what you need....</summary>
    <content type="html"><![CDATA[
        <p>With a few adjustments to get it to build for my environment I was mostly able to follow Jigsaw's <a href="https://jigsaw.tighten.co/docs/installation/">installation guide</a> I'll throw in a quick summary here in case you don't want to have both tabs open:</p>

<p>First, create the project directory: <code>$ mkdir cool-blog</code>.</p>

<p>Second, install Jigsaw with composer:</p>

<pre><code class="language-bash">$ cd cool-blog
$ composer require tightenco/jigsaw
</code></pre>

<p>Finally, initialize your project and make it a blog:</p>

<pre><code>./vendor/bin/jigsaw init blog
</code></pre>

<p>Then if you want to take a look at what it looks like run this command:</p>

<pre><code class="language-bash">$ npm run local
</code></pre>

<p>This creates a <code>build_local</code> directory that allows you to preview your site. Run this command to see what that looks like:</p>

<pre><code class="language-bash">npm run watch
</code></pre>

<p>Run watch is great because it shows local changes as you make them.</p>

<p>If you want to change what shows up in the title and the base URL take a look at <code>config.php</code> and <code>config.production.php</code> and make some adjustments.</p>

<p>If you want to see what your blog looks when it's released run this command:</p>

<pre><code class="language-bash">$ npm run production
</code></pre>

<p>As for getting it deployed Jigsaw has a great guide for different targets:
<a href="https://jigsaw.tighten.co/docs/deploying-your-site/">Deploying your site</a></p>

<p>My target was a special system we use at Bushel that utilizes docker. I had commit the <code>build_production</code> folder to make it work like so:</p>

<pre><code class="language-bash">git add -f build_production &amp;&amp; git commit -m "Build for deploy"
</code></pre>

<p>I need the -f because the .gitignore file has an entry to ignore everything in the build directory <code>/build_*/</code>.</p>

<p>Then I created a Dockerfile that uses the <code>copy</code> command to copy it to the correct directory:</p>

<pre><code>copy ./build_production/ /var/www/public/
</code></pre>

<p>Then I deployed it out to the server and you can see the result!</p>

<p>What are you going to write about in Jigsaw?</p>
    ]]></content>
</entry>
    </feed>
