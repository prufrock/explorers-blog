<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>David&#039;s Blog</title>
    <link href="https://dkanen.scaleticket.net" />
    <link type="application/atom+xml" rel="self" href="https://dkanen.scaleticket.net/blog/feed.atom" />
    <updated>2020-02-18T02:00:20+00:00</updated>
    <id>https://dkanen.scaleticket.net/blog/feed.atom</id>
    <author>
        <name>David Kanenwisher</name>
    </author>
                <entry>
    <id>https://dkanen.scaleticket.net/blog/oh-graphql-may-i-have-a-user</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/oh-graphql-may-i-have-a-user" />
    <title>Oh GraphQL, May I Have Some Users?</title>
    <published>2020-02-16T00:00:00+00:00</published>
    <updated>2020-02-16T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Sure GraphQL is straightforward. That doesn&#039;t mean it&#039;s obvious(to me anyway)....</summary>
    <content type="html"><![CDATA[
        <p>I've heard GraphQL is easy to pick up. I've done a little reading on the official <a href="https://graphql.org/">GraphQL site</a> and watch some videos on YouTube. I figure I got what I need to get started. I just need a GraphQL server.</p>

<p>I went the through the <a href="https://lighthouse-php.com/tutorial/#installation">tutorial</a> on Lighthouse PHP's website. Well, not the whole thing(yet), just the installation part. I stopped there because I got back the user like in their example.</p>

<p>GraphQL Query for a user</p>

<pre><code class="graphql">{
  user(id: 1) {
    id
    name
    email
  }
}
</code></pre>

<p>With this result:</p>

<pre><code class="graphql">{
  "data": {
    "user": {
      "id": "1",
      "name": "Shea Spencer DDS",
      "email": "ismael.fisher@example.net"
    }
  }
}
</code></pre>

<p>Notice how the of <strong>shape</strong> of the query and the result are similar? Maybe you're wondering why I said <strong>shape</strong>? It seems to be the fancy way the GraphQL folks like to say that, ignoring the "data" key, the query and the result have the same keys in the same order. Therefore if I add or remove keys from the query I can change what comes back. For instance I can remove "email" from the query.</p>

<p>GraphQL query for user without "email":</p>

<pre><code class="graphql">{
  user(id: 1) {
    id
    name
  }
}
</code></pre>

<p>Result of the GraphQL query:</p>

<pre><code class="graphql">{
  "data": {
    "user": {
      "id": "1",
      "name": "Shea Spencer DDS"
    }
  }
}
</code></pre>

<p>See how email is gone? Pretty neat, eh? I didn't have to do anything special in my PHP code to make that happen. Lighthouse just handles it for me. Pretty damn spiffy if you ask me. Ok, ok, let's get to the part where I confuse myself and then eventually resolve that confusion in a shower of JSON.</p>

<p>I saw this query for "user(id: 1)". (Can I take you aside for a moment and explain something to you? So those parentheses after "user" that's called an argument. Supposedly any field in GraphQL can take an argument. No more fuddling with the URL non-sense. Rockin' right?). I thought, "If I can get one user I must be able to get 2 users, 3 users, all of the users?" Being the intrepid explorer that I am I tried this query:</p>

<p>First attempt to get users from GraphQL:</p>

<pre><code class="graphql">{
  # switched user to users
  # you can put comments in GraphQL queries
  # so rad
  users {
    id
    name
    email
  }
}
</code></pre>

<p>This is when I realize...The game is a foot!</p>

<pre><code class="graphql">{
  "errors": [
    {
      "message": "Cannot query field \"id\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 3,
          "column": 5
        }
      ]
    },
    {
      "message": "Cannot query field \"name\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 4,
          "column": 5
        }
      ]
    },
    {
      "message": "Cannot query field \"email\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 5,
          "column": 5
        }
      ]
    }
  ]
}
</code></pre>

<p>"I don't want a UserPaginator!", I shake my fist at the screen, "What is this nonsense. I read something about a schema! Show me the schema you foul ruffian!"</p>

<p>The GraphQL Playground has a little schema drawer on the left side. It doesn't response to shouting but it does respond, like a friendly button, to clicks. I scroll around a bit and find what I'm looking for:</p>

<pre><code class="graphql">type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User!]!
}
</code></pre>

<p>Ah ha! There's the User I want. For some reason it's shouting "User!" at me but I'll worry about that later. For now I venture forward. Everybody is always talking about the shapes of queries so I take a run at shaping my query to get at the "User!" in "UserPaginator".</p>

<p>UserPaginator show me Users!</p>

<pre><code class="graphql">{
  users {
    UserPaginator {
      data {
        name
      }
    }
  }
}
</code></pre>

<p>I guess not:</p>

<pre><code class="graphql">{
  "errors": [
    {
      "message": "Cannot query field \"UserPaginator\" on type \"UserPaginator\".",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 3,
          "column": 5
        }
      ]
    }
  ]
}
</code></pre>

<p>Drat! That wasn't it. Back to the schema because I clearly don't understand what I think I'm working with. I find a "users" query defined in the schema. I'm pretty sure I got a hold of something here.</p>

<pre><code class="graphql">type Query {
  users(
    first: Int = 10
    page: Int
  ): UserPaginator
  user(id: ID): User
}
</code></pre>

<p>Does that mean "users" returns a UserPaginator? If so then I think I should treat the "users" element as a "UserPaginator" and put fields I want in there.</p>

<p>Query for the fields I want on UserPaginator:</p>

<pre><code class="graphql">{
  users {
    # data is a field on UserPaginator
      data {
        id
        name
        email
      }
  }
}
</code></pre>

<p>The result. I hit pay dirt!</p>

<pre><code class="graphql">{
  "data": {
    "users": {
      "data": [
        {
          "id": "1",
          "name": "Shea Spencer DDS",
          "email": "ismael.fisher@example.net"
        },
        {
          "id": "2",
          "name": "Prof. Soledad Larson",
          "email": "mmorissette@example.net"
        },
        {
          "id": "3",
          "name": "Dr. Coleman Boehm",
          "email": "senger.kolby@example.net"
        },
        {
          "id": "4",
          "name": "Jazmyn Padberg",
          "email": "london72@example.net"
        },
        {
          "id": "5",
          "name": "Parker Stokes",
          "email": "valentina.gulgowski@example.org"
        },
        {
          "id": "6",
          "name": "Raven McDermott",
          "email": "fpouros@example.org"
        },
        {
          "id": "7",
          "name": "Alec Pouros",
          "email": "erdman.herminio@example.org"
        },
        {
          "id": "8",
          "name": "Fanny Harber",
          "email": "erich80@example.com"
        },
        {
          "id": "9",
          "name": "Emelia Rogahn",
          "email": "thurman65@example.org"
        },
        {
          "id": "10",
          "name": "Jayne Klocko",
          "email": "kaya.rutherford@example.net"
        }
      ]
    }
  }
}
</code></pre>

<p>That's how I figured out how to get fields on the users query. I can't say I fully understand why UserPaginator gets to override "users" in the query. Also, why is the element "data" rather than "users"? It seems like I'm losing some useful type information there.</p>

<p>My questions aside, how's your GraphQL journey going?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/test-events-were-not-received</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/test-events-were-not-received" />
    <title>I&#039;ll Receive You Some Test Events!</title>
    <published>2020-02-15T00:00:00+00:00</published>
    <updated>2020-02-15T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I ran into some trouble tonight try to get Intellij to run all my tests. It kept saying &quot;Test events were not received&quot;. I scratched my head and wondered aloud what could be the cause of this....</summary>
    <content type="html"><![CDATA[
        <p>I sat down in front of my laptop to learn some GraphQL. I was flipping through my open windows and I discovered I had some uncommitted Kotlin code in the repo where I am learning Kotlin. This wouldn't do. No, this wouldn't do.</p>

<p>I went to commit the code and Intellij helpfully told me there were some warnings that I should review before committing.</p>

<p>"OK", I thought, "probably not that important. I'll just run the tests and if they pass I'll commit." If it only it were that easy...queue Jefferson Airplane cuz we're going down a rabbit hole. Intellij gave me a very understated message in my test runner window "Test events were not received". I was pretty sure this was related to Gradle.</p>

<p>As a quick aside, I don't know much about Gradle yet. I need to know more about Gradle. Eventually I'll be able to understand Gradle. Until then, I fully expect to lean on my knowledgeable co-workers to set up Gradle projects correctly.</p>

<p>Some quick <a href="https://duckduckgo.com">DuckDuckGo</a>'ing and I found there was an answer on StackOverflow.</p>

<p><a href="https://stackoverflow.com/questions/57795263/test-events-were-not-received-when-run-tests-using-intellij">“Test events were not received” when run tests using Intellij</a></p>

<p>I spoke the words, "Yay! An answer to my exact question!"</p>

<p>They recommended switching test runners. You go to "File -> Settings ->Build,Execution, Deployment -> Build Tools -> Gradle" and set the "Run tests using" to "Intellij". This worked for a hot second. Then I got skeptical(this often causes me trouble). "Shouldn't this just work?", I thought, "Gradle test works in my shell. Why not in Intellij?". I fiddled with some settings mostly in the aforementioned window and broke the tests such that I couldn't get them to work anymore.</p>

<p>I got a little despondent at this point. I wondered if I'd ever be able to run all my tests in Intellij without having to grok all of Gradle. I just wanted to get back to learning about GraphQL!</p>

<p>Then I had heard a light bulb "click" and I right clicked on the "test" folder. There I found a "Run "All Tests"" option.</p>

<p>I clicked it.</p>

<p>They all ran. I clicked it again. They all ran. I tried the gradle test task in Intellij. Agony again "Test events were not received". It was different I was starting to understand the pain now.</p>

<p>When I ran via "Run "All Tests"" I noticed that it showed "<default package>" at the top. I don't understand what that means exactly. It made me wonder if I had the packages correct in my tests. I started checking them.</p>

<p>That's when I found it. One of them had the package set to "acceptance". I switched it to "com.dkanen". Then bingo bango it worked from Intellij's gradle test task! Well, or so I thought.</p>

<p>Friends, I have to admit I ran into a wall on this one. I can never get gradle test to work more than once in Intellij without running gradle clean first. It's always like this:</p>

<ol>
<li>gradle clean</li>
<li>gradle test</li>
<li>goto 1</li>
</ol>

<p>I'm going to live with "Run "All Tests"" for now.</p>

<p>Have you run into "Test events were not received" in Intellij and found a reliable way to fix it?</p>

<p>I'm going back to GraphQL...for now.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/single-expression-functions</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/single-expression-functions" />
    <title>Single Expression Functions</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Many of the functions in the Kotlin standard library are implemented as Single Expression Functions. I started wondering how I could use them in my own code....</summary>
    <content type="html"><![CDATA[
        <p>I was listening to Talking Kotlin <a href="https://pca.st/09ybe338">Kotlin Cookbook</a>. The author of the Kotlin Cookbook, Ken Kousen, mentioned that one of the features he really likes about Kotlin are single expression functions. He even pointed out how cool it was that many of the functions in the Kotlin standard library are implemented as Single Expression Functions. At this point my curiosity had piqued and I had to know more.</p>

<p>I did some rapid googling and found myself staring at Programming Kotlin by Stephen Samuel and Stefan Bocutiu. There was a very short chapter in there on Single Expression Functions but after staring at it for a few minutes I had to try it out.</p>

<p>I've got this dirt simple class that I was able to change from this:</p>

<pre><code class="kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int {
        return (++location)
    }

    fun talk(): String {
        return "You talk to no one in particular."
    }

    fun listen(): String {
        return "There is no sound to hear."
    }

    fun talk(listener: Adventurer): String {
       return "Talking to yourself may be a sign of genius"
    }

    fun heard(): String {
       return "How fair the beets at this establishment?"
    }

}
</code></pre>

<p>To this:</p>

<pre><code class="kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int = (++location)

    fun talk(): String = "You talk to no one in particular."

    fun listen(): String = "There is no sound to hear."

    fun talk(listener: Adventurer): String = "Talking to yourself may be a sign of genius"

    fun heard(): String = "How fair the beets at this establishment?"

}
</code></pre>

<p>Do you see the difference? Pretty neat eh?</p>

<p>What do you think you could use Single Expression Functions to simplify?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/getting-started-with-jigsaw</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/getting-started-with-jigsaw" />
    <title>Getting Started With Jigsaw</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">With a few adjustments to get it to build for my environment I was mostly able to follow Jigsaw&#039;s installation guide....</summary>
    <content type="html"><![CDATA[
        <p>With a few adjustments to get it to build for my environment I was mostly able to follow Jigsaw's <a href="https://jigsaw.tighten.co/docs/installation/">installation guide</a> I'll throw in a quick summary here in case you don't want to have both tabs open:</p>

<p>First, create the project directory: <code>$ mkdir cool-blog</code>.</p>

<p>Second, install Jigsaw with composer:</p>

<pre><code class="bash">$ cd cool-blog
$ composer require tightenco/jigsaw
</code></pre>

<p>Finally, initialize your project and make it a blog:</p>

<pre><code>./vendor/bin/jigsaw init blog
</code></pre>

<p>Then if you want to take a look at what it looks like run this command:</p>

<pre><code class="bash">$ npm run local
</code></pre>

<p>This creates a <code>build_local</code> directory that allows you to preview your site. Run this command to see what that looks like:</p>

<pre><code class="bash">npm run watch
</code></pre>

<p>Run watch is great because it shows local changes as you make them.</p>

<p>If you want to change what shows up in the title and the base URL take a look at <code>config.php</code> and <code>config.production.php</code> and make some adjustments.</p>

<p>If you want to see what your blog looks when it's released run this command:</p>

<pre><code class="bash">$ npm run production
</code></pre>

<p>As for getting it deployed Jigsaw has a great guide for different targets:
<a href="https://jigsaw.tighten.co/docs/deploying-your-site/">Deploying your site</a></p>

<p>My target was a special system we use at Bushel that utilizes docker. I had commit the <code>build_production</code> folder to make it work like so:</p>

<pre><code class="bash">git add -f build_production &amp;&amp; git commit -m "Build for deploy"
</code></pre>

<p>I need the -f because the .gitignore file has an entry to ignore everything in the build directory <code>/build_*/</code>.</p>

<p>Then I created a Dockerfile that uses the <code>copy</code> command to copy it to the correct directory:</p>

<pre><code>copy ./build_production/ /var/www/public/
</code></pre>

<p>Then I deployed it out to the server and you can see the result!</p>

<p>What are you going to write about in Jigsaw?</p>
    ]]></content>
</entry>
    </feed>
