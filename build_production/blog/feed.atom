<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>David&#039;s Blog</title>
    <link href="https://dkanen.scaleticket.net" />
    <link type="application/atom+xml" rel="self" href="https://dkanen.scaleticket.net/blog/feed.atom" />
    <updated>2020-02-14T03:10:25+00:00</updated>
    <id>https://dkanen.scaleticket.net/blog/feed.atom</id>
    <author>
        <name>David Kanenwisher</name>
    </author>
                <entry>
    <id>https://dkanen.scaleticket.net/blog/single-expression-functions</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/single-expression-functions" />
    <title>Single Expression Functions</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I was listening to Talking Kotlin Kotlin Cookbook. The author of the Kotlin Cookbook, Ken Kousen, mentioned that one of the features he really likes about Kotlin are single expression functions. He even pointed out how cool it was that many of the......</summary>
    <content type="html"><![CDATA[
        <p>I was listening to Talking Kotlin <a href="https://pca.st/09ybe338">Kotlin Cookbook</a>. The author of the Kotlin Cookbook, Ken Kousen, mentioned that one of the features he really likes about Kotlin are single expression functions. He even pointed out how cool it was that many of the functions in the Kotlin standard library are implemented as Single Expression Functions. At this point my curiosity had piqued and I had to know more.</p>

<p>I did some rapid googling and found myself staring at Programming Kotlin by Stephen Samuel and Stefan Bocutiu. There was a very short chapter in there on Single Expression Functions but after staring at it for a few minutes I had to try it out.</p>

<p>I've got this dirt simple class that I was able to change from this:</p>

<pre><code class="kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int {
        return (++location)
    }

    fun talk(): String {
        return "You talk to no one in particular."
    }

    fun listen(): String {
        return "There is no sound to hear."
    }

    fun talk(listener: Adventurer): String {
       return "Talking to yourself may be a sign of genius"
    }

    fun heard(): String {
       return "How fair the beets at this establishment?"
    }

}
</code></pre>

<p>To this:</p>

<pre><code class="kotlin">com.dkanen

class Adventurer(val name: String) {

    var location: Int = 0

    fun walk(): Int = (++location)

    fun talk(): String = "You talk to no one in particular."

    fun listen(): String = "There is no sound to hear."

    fun talk(listener: Adventurer): String = "Talking to yourself may be a sign of genius"

    fun heard(): String = "How fair the beets at this establishment?"

}
</code></pre>

<p>Do you see the difference? Pretty neat eh?</p>

<p>What do you think you could use Single Expression Functions to simplify?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/getting-started-with-jigsaw</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/getting-started-with-jigsaw" />
    <title>Getting Started With Jigsaw</title>
    <published>2020-02-13T00:00:00+00:00</published>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">I pretty much followed the Jigsaw&#039;s installation guide to get started. I&#039;ll throw in a quick summary here in case you don&#039;t want to have both tabs open:

First, create the project directory: &lt;code&gt;$ mkdir cool-blog&lt;/code&gt;.

Second, install Jigsaw with......</summary>
    <content type="html"><![CDATA[
        <p>I pretty much followed the Jigsaw's <a href="https://jigsaw.tighten.co/docs/installation/">installation guide</a> to get started. I'll throw in a quick summary here in case you don't want to have both tabs open:</p>

<p>First, create the project directory: <code>$ mkdir cool-blog</code>.</p>

<p>Second, install Jigsaw with composer:</p>

<pre><code class="bash">$ cd cool-blog
$ composer require tightenco/jigsaw
</code></pre>

<p>Finally, initialize your project and make it a blog:</p>

<pre><code>./vendor/bin/jigsaw init blog
</code></pre>

<p>Then if you want to take a look at what it looks like run this command:</p>

<pre><code class="bash">$ npm run local
</code></pre>

<p>This creates a <code>build_local</code> directory that allows you to preview your site. Run this command to see what that looks like:</p>

<pre><code class="bash">npm run watch
</code></pre>

<p>Run watch is great because it shows local changes as you make them.</p>

<p>If you want to change what shows up in the title and the base URL take a look at <code>config.php</code> and <code>config.production.php</code> and make some adjustments.</p>

<p>If you want to see what your blog looks when it's released run this command:</p>

<pre><code class="bash">$ npm run production
</code></pre>

<p>As for getting it deployed Jigsaw has a great guide for different targets:
<a href="https://jigsaw.tighten.co/docs/deploying-your-site/">Deploying your site</a></p>

<p>My target was a special system we use at Bushel that utilizes docker. I had commit the <code>build_production</code> folder to make it work like so:</p>

<pre><code class="bash">git add -f build_production &amp;&amp; git commit -m "Build for deploy"
</code></pre>

<p>I need the -f because the .gitignore file has an entry to ignore everything in the build directory <code>/build_*/</code>.</p>

<p>Then I created a Dockerfile that uses the <code>copy</code> command to copy it to the correct directory:</p>

<pre><code>copy ./build_production/ /var/www/public/
</code></pre>

<p>Then I deployed it out to the server and you can see the result!</p>

<p>What are you going to write about in Jigsaw?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/getting-started</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/getting-started" />
    <title>Getting Started</title>
    <published>2018-12-25T00:00:00+00:00</published>
    <updated>2018-12-25T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">&lt;p&gt;This is a starter template for creating a beautiful, customizable blog with minimal effort. You’ll only have to change a few settings and you’re ready to go....</summary>
    <content type="html"><![CDATA[
        <p>This is a starter template for creating a beautiful, customizable blog with minimal effort. You’ll only have to change a few settings and you’re ready to go.<!-- more --></p>

<h2>Configuration</h2>

<p>As with all Jigsaw sites, configuration settings can be found in <code>config.php</code>; you can update the variables in that file with settings specific to your site. You can also add new configuration variables there to use across your site; take a look at the <a href="http://jigsaw.tighten.co/docs/site-variables/">Jigsaw documentation</a> to learn more.</p>

<pre><code class="php">// config.php
return [
    'baseUrl' =&gt; 'https://my-awesome-jigsaw-site.com/',
    'production' =&gt; false,
    'siteName' =&gt; 'My Site',
    'siteDescription' =&gt; 'Give your blog a boost with Jigsaw.',
    ...
];
</code></pre>

<blockquote>
  <p>Tip: This configuration file is also where you’ll define any "collections" (for example, a collection of the contributors to your site, or a collection of blog posts organized by topic). Check out the official <a href="https://jigsaw.tighten.co/docs/collections/">Jigsaw documentation</a> to learn more.</p>
</blockquote>

<hr />

<h3>Adding Content</h3>

<p>You can write your content using a <a href="http://jigsaw.tighten.co/docs/content-other-file-types/">variety of file types</a>. By default, this starter template expects your content to be located in the <code>source/_posts/</code> folder.</p>

<p>The top of each content page contains a YAML header that specifies how it should be rendered. The <code>title</code> attribute is used to dynamically generate HTML <code>title</code> and OpenGraph tags for each page. The <code>extends</code> attribute defines which parent Blade layout this content file will render with (e.g. <code>_layouts.post</code> will render with <code>source/_layouts/post.blade.php</code>), and the <code>section</code> attribute defines the Blade "section" that expects this content to be placed into it.</p>

<pre><code class="yaml">---
extends: _layouts.post
section: content
title: Getting Started
date: 2018-12-25
description: Getting started with the Jigsaw blog starter template
cover_image: /assets/img/post-cover-image-2.png
featured: true
---
</code></pre>

<h3>Adding Assets</h3>

<p>Any assets that need to be compiled (such as JavaScript, Less, or Sass files) can be added to the <code>source/_assets/</code> directory, and Laravel Mix will process them when running <code>npm run local</code> or <code>npm run production</code>. The processed assets will be stored in <code>/source/assets/build/</code> (note there is no underscore on this second <code>assets</code> directory).</p>

<p>Then, when Jigsaw builds your site, the entire <code>/source/assets/</code> directory containing your built files (and any other directories containing static assets, such as images or fonts, that you choose to store there) will be copied to the destination build folders (<code>build_local</code>, on your local machine).</p>

<p>Files that don't require processing (such as images and fonts) can be added directly to <code>/source/assets/</code>.</p>

<p><a href="http://jigsaw.tighten.co/docs/compiling-assets/">Read more about compiling assets in Jigsaw using Laravel Mix.</a></p>

<hr />

<h2 id="getting-started-building-your-site">Building Your Site</h2>

<p>Now that you’ve edited your configuration variables and know how to customize your styles and content, let’s build the site.</p>

<pre><code class="bash"># build static files with Jigsaw
./vendor/bin/jigsaw build

# compile assets with Laravel Mix
# options: dev, staging, production
npm run dev
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/customizing-your-site</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/customizing-your-site" />
    <title>Customizing Your Site</title>
    <published>2018-12-24T00:00:00+00:00</published>
    <updated>2018-12-24T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">This starter template comes pre-loaded with Tailwind CSS, a utility CSS framework that allows you to customize and build complex designs without touching a line of CSS....</summary>
    <content type="html"><![CDATA[
        <p>This starter template comes pre-loaded with <a href="https://tailwindcss.com">Tailwind CSS</a>, a utility CSS framework that allows you to customize and build complex designs without touching a line of CSS. There are also a few base Sass files in the <code>/source/_assets/sass</code> folder, set up with the expectation that you can add any custom CSS into <code>_blog.scss</code>.</p>

<blockquote>
  <p>You can also re-work the architecture of the Sass files any way you’d like; just make sure to keep the <code>@tailwind</code> references in your final <code>main.scss</code> file.</p>
</blockquote>

<pre><code class="scss">// source/_assets/sass/main.scss

@tailwind preflight;
@tailwind components;

// Code syntax highlighting,
// https://highlightjs.org
@import '~highlightjs/styles/default';

@import 'base';
@import 'navigation';
@import 'mailchimp';
@import 'blog';

@tailwind utilities;
</code></pre>

<hr />

<h2>Typography Styles</h2>

<p>Here’s a quick preview of what some of the basic type styles will look like in this starter template:</p>

<h1>h1 Heading</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<p>The quick brown fox jumps over the lazy dog</p>

<p><s>The quick brown fox jumps over the lazy dog</s></p>

<p><u>The quick brown fox jumps over the lazy dog</u></p>

<p><em>The quick brown fox jumps over the lazy dog</em></p>

<p><strong>The quick brown fox jumps over the lazy dog</strong></p>

<p><code>The quick brown fox jumps over the lazy dog</code></p>

<p><small>The quick brown fox jumps over the lazy dog</small></p>

<blockquote>
  <p>The quick brown fox jumps over the lazy dog</p>
</blockquote>

<p><a href="#">The quick brown fox jumps over the lazy dog</a></p>

<pre><code class="php">class Foo extends bar
{
    public function fooBar()
    {
        //
    }
}
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/custom-404-page</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/custom-404-page" />
    <title>Custom 404 Pages</title>
    <published>2018-12-23T00:00:00+00:00</published>
    <updated>2018-12-23T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">This starter template includes a custom 404 Not Found error page, located at &lt;code&gt;/source/404.blade.php&lt;/code&gt;. To preview the 404 page, you can visit &lt;code&gt;/404&lt;/code&gt; in your browser.





Depending on where your site is hosted, you may need to......</summary>
    <content type="html"><![CDATA[
        <p>This starter template includes a custom <strong>404 Not Found</strong> error page, located at <code>/source/404.blade.php</code>. <a href="/404">To preview the 404 page</a>, you can visit <code>/404</code> in your browser.</p>

<pre><code class="html">&lt;!-- source/404.blade.php --&gt;

@extends('_layouts.master')

@section('body')
    &lt;div class="flex flex-col items-center text-gray-700 mt-32"&gt;
        &lt;h1 class="text-6xl font-light leading-none mb-2"&gt;404&lt;/h1&gt;

        &lt;h2 class="text-3xl"&gt;Page not found.&lt;/h2&gt;

        &lt;hr class="block w-full max-w-sm mx-auto border my-8"&gt;

        &lt;p class="text-xl"&gt;
            Need to update this page? See the &lt;a title="404 Page Documentation" href="https://jigsaw.tighten.co/docs/custom-404-page/"&gt;Jigsaw documentation&lt;/a&gt;.
        &lt;/p&gt;
    &lt;/div&gt;
@endsection
</code></pre>

<hr />

<p>Depending on where your site is hosted, you may need to configure your server to use the custom 404 page. For more details, visit the <a href="https://jigsaw.tighten.co/docs/custom-404-page/">Jigsaw documentation about configuring a custom 404 page</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/fuse-search</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/fuse-search" />
    <title>Fuse Search</title>
    <published>2018-12-22T00:00:00+00:00</published>
    <updated>2018-12-22T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">To provide fast, local search of your blog, this starter template comes with a pre-built Vue.js component that uses Fuse.js. Fuse.js is a &quot;lightweight fuzzy-search library with no dependencies.&quot; It works by running queries against a JSON index of your......</summary>
    <content type="html"><![CDATA[
        <p>To provide fast, local search of your blog, this starter template comes with a pre-built Vue.js component that uses Fuse.js. <a href="http://fusejs.io/">Fuse.js</a> is a "lightweight fuzzy-search library with <em>no</em> dependencies." It works by running queries against a JSON index of your content.</p>

<p>During the <a href="http://jigsaw.tighten.co/docs/building-and-previewing/">build process</a>, the contents of your <code>posts</code> collection is processed by the <code>GenerateIndex.php</code> listener, and an <code>index.json</code> file is generated in the build directory. The <code>Search.vue</code> component provides a search input that queries this local index.</p>

<p>If you'd like to customize the generation of your search index, take a look at the <code>handle</code> method of the <code>GenerateIndex.php</code> file.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/mailchimp-newsletters</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/mailchimp-newsletters" />
    <title>Mailchimp Newsletters</title>
    <published>2018-11-21T00:00:00+00:00</published>
    <updated>2018-11-21T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">Mailchimp is a fantastic marketing platform, and takes the pain out of managing email lists and campaigns. The blog starter template comes with a beautiful pre-built newsletter form, that only needs a Mailchimp list URL to send to.

To begin accepting......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://mailchimp.com/">Mailchimp</a> is a fantastic marketing platform, and takes the pain out of managing email lists and campaigns. The blog starter template comes with a beautiful pre-built newsletter form, that only needs a Mailchimp list URL to send to.</p>

<p>To begin accepting subscribers, simply add your list URL to the form <code>action</code> in the <code>source/_components/newsletter-signup.blade.php</code> file.</p>

<pre><code class="html">&lt;!-- source/_components/newsletter-signup.blade.php --&gt;

&lt;div id="mc_embed_signup"&gt;
    &lt;form action="https://your-mail-chimp-list-manage-url" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
        &lt;div id="mc_embed_signup_scroll"&gt;
            &lt;h2&gt;Sign up for newsletter&lt;/h2&gt;
            &lt;div class="mc-field-group"&gt;
                &lt;label for="mce-EMAIL"&gt;Email Address &lt;/label&gt;
                &lt;input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL" placeholder="Email address"&gt;
            &lt;/div&gt;
            &lt;div id="mce-responses" class="clear"&gt;
                &lt;div class="response" id="mce-error-response" style="display:none"&gt;&lt;/div&gt;
                &lt;div class="response" id="mce-success-response" style="display:none"&gt;&lt;/div&gt;
            &lt;/div&gt;    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;

            &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_25582686a9fc051afd5453557_189578c854" tabindex="-1" value=""&gt;&lt;/div&gt;
            &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<h3>Example</h3>

<p><img src="/assets/img/newsletter.png"></p>

<p><a href="https://mailchimp.com/help/host-your-own-signup-forms/#Edit_your_Custom_Signup_Form">See how to get your Mailchimp list URL.</a></p>
    ]]></content>
</entry>
            <entry>
    <id>https://dkanen.scaleticket.net/blog/my-first-blog-post</id>
    <link type="text/html" rel="alternate" href="https://dkanen.scaleticket.net/blog/my-first-blog-post" />
    <title>My First Blog Post</title>
    <published>2017-03-23T00:00:00+00:00</published>
    <updated>2017-03-23T00:00:00+00:00</updated>
    <author>
        <name>David Kanenwisher</name>
    </author>
    <summary type="html">This is the start of your first blog post....</summary>
    <content type="html"><![CDATA[
        <p>This is the start of your first blog post.</p>
    ]]></content>
</entry>
    </feed>
